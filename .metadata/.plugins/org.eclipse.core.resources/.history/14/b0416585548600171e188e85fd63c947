package com.servicenow.applicationspecificlibraries;

import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.servicenow.genericlibraries.ReporterLogs;

public class Waits {

	public static void waitForPageToLoad(WebDriver driver, int timeout){
		ReporterLogs.log("Wait for page to load", "info");
		driver.manage().timeouts().implicitlyWait(timeout, TimeUnit.SECONDS);
	}
	
	public static void waitForIdPresent(WebDriver driver, String wbId){
		WebDriverWait wait = new WebDriverWait(driver, 50);
		wait.until(ExpectedConditions.presenceOfAllElementsLocatedBy(By.id(wbId)));	
	}
	
	public static void waitForNamePresent(WebDriver driver, String wbName){
		WebDriverWait wait = new WebDriverWait(driver, 50);
		wait.until(ExpectedConditions.presenceOfAllElementsLocatedBy(By.name(wbName)));
	}
	
	public static void waitForXpathPresent(WebDriver driver, String wbXpath){
		WebDriverWait wait = new WebDriverWait(driver, 50);
		wait.until(ExpectedConditions.presenceOfAllElementsLocatedBy(By.xpath(wbXpath)));
	}
	//Checking for Visibility of element using Explicit Wait
	public static void visibilityOfElement(WebDriver driver, WebElement element, int timeOut, String elementName){
		if(element != null){
			try
			{
				ReporterLogs.log("Waiting "+timeOut+ " Seconds for Visibility of "+elementName, "info");
				WebDriverWait wait=new WebDriverWait(driver,timeOut);
				wait.until(ExpectedConditions.visibilityOf(element));
			}
			catch(Exception e)
			{
				ReporterLogs.log("Unable to find "+elementName+" in "+timeOut+" milli Seconds as exception encountered "+e.getMessage(), "error");
			}	
		}else{
			ReporterLogs.log("Null Pointer Exception");
		}
	}

	/*
	 * Checking for Visibility of all element using Explicit Wait
	 */
	public static void visibilityOfAllElement(WebDriver driver,List<WebElement> elements, int timeOut)
		{
			try
			{
				ReporterLogs.log("Waiting "+timeOut+ " Seconds for Visibility of all the given elements ", "info");
				WebDriverWait wait=new WebDriverWait(driver,timeOut);
				wait.until(ExpectedConditions.visibilityOfAllElements(elements));
			}
			catch(Exception e)
			{
				ReporterLogs.log("Unable to find elements in "+timeOut+" Seconds" + e.getCause(), "error");
			}	
		}
	
	/*
	 * SleepingWait : is the solution to avoid Thread.sleep which will blindly make the selenium to sleep for the provided.
	 * i.e., When sleepingWait method is used it waits for the given waitTime for the element to get enabled or visibled but,
	 * checks every half second for the elements visibility which if true will break out of the loop and exits the methods.
	 * This should be replacing all the Thread.sleep methods in the coding.
	 */
	    public static void sleepingWait(WebDriver driver, WebElement element, int timeOut) throws InterruptedException
	    {
	    	    	driver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS); 
	    	long currentTime =0;
	    	long poolingTime=0;
	    	currentTime=System.currentTimeMillis();
	    	poolingTime = currentTime + timeOut;
	    	if(timeOut>500)
	    	{
	    	while(currentTime<=poolingTime) 	{
	    		currentTime=System.currentTimeMillis();
	    		if(currentTime>poolingTime)	{
	    			throw new NoSuchElementException(element+" Not Found");	}
	    		try{
	    			if(!element.isDisplayed())	{
	    				Thread.sleep(500);	}
	    			if(element.isDisplayed()){
	    				break;	}		}
	    		catch(Exception e)	{
	    			e.getMessage();	}	}  	}
	    	else if(timeOut<=500&&timeOut>=100)	{
	    		while(currentTime<=poolingTime) {
	    			currentTime=System.currentTimeMillis();
	        		if(currentTime>poolingTime)	{
	        			throw new NoSuchElementException(element+" Not Found");	}
	        		try{
	        			if(!element.isDisplayed())	{
	        				Thread.sleep(100);	}
	        		if(element.isDisplayed())	{
	        			break;	}	}
	        		catch(Exception e)	{
	        			e.getMessage();	}	}	 }
	    	else
				Thread.sleep(timeOut);
	  }

}
